name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  owasp-dependency-check:
    name: OWASP Dependency-Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install .NET 6.0 Runtime (Required for Dependency-Check)
        run: |
          echo "Installing .NET 6.0 Runtime..."
          wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y dotnet-sdk-6.0 || sudo apt-get install -y dotnet-runtime-6.0

      - name: Download and Extract OWASP Dependency-Check
        run: |
          echo "Downloading OWASP Dependency-Check..."
          curl -sLO https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
          unzip -o dependency-check-8.4.0-release.zip -d dependency-check
          mv dependency-check/dependency-check/* dependency-check/  # Fix path issue

      - name: Run OWASP Dependency-Check
        run: |
          chmod +x dependency-check/bin/dependency-check.sh
          dependency-check/bin/dependency-check.sh --scan . --format "HTML" --out reports || { echo "Dependency-Check failed!"; exit 1; }

      - name: Upload OWASP Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: OWASP-Dependency-Check-Report
          path: reports/

  trivy-security-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    needs: owasp-dependency-check
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Syft
        run: |
          curl -sSL https://github.com/anchore/syft/releases/download/v0.56.0/syft_0.56.0_linux_amd64.tar.gz | tar xz -C /usr/local/bin syft

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin

      - name: Generate SBOM using Syft
        run: |
          syft . -o cyclonedx-xml > sbom.xml

      - name: Run Trivy FS Scan (Source Code Vulnerabilities)
        run: |
          trivy fs --exit-code 1 --severity HIGH,CRITICAL --format table . > trivy-fs-results.txt

      - name: Upload Trivy FS Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs-results
          path: trivy-fs-results.txt

      - name: Upload Trivy SBOM Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sbom-results
          path: sbom.xml

  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: trivy-security-scan
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/application-game:${{ github.run_id }} .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/application-game:${{ github.run_id }} ${{ secrets.DOCKERHUB_USERNAME }}/application-game:latest

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/application-game:${{ github.run_id }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/application-game:latest

      - name: Run Trivy Image Scan (Container Image Vulnerabilities)
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL --format table -o trivy-image-results.txt ${{ secrets.DOCKERHUB_USERNAME }}/application-game:${{ github.run_id }} || true

      - name: Upload Trivy Image Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-results
          path: trivy-image-results.txt

  update-helm-chart:
    name: Update Helm Chart
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history for conflict resolution

      - name: Configure Git
        run: |
          git config --global user.email "chandaneyash10@gmail.com"
          git config --global user.name "yashchandane123"

      - name: Pull Latest Changes and Auto-Resolve Conflicts
        run: |
          git fetch origin main
          git checkout main
          git pull origin main --rebase --autostash || (git rebase --abort && git pull --no-rebase)
          git merge --strategy-option=ours origin/main

      - name: Update Helm Chart Tag
        run: |
          sed -i "s/tag: .*/tag: \"${{ github.run_id }}\"/" helm/game-chart/values.yaml

      - name: Commit and Push Changes
        run: |
          git add helm/game-chart/values.yaml
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update tag in Helm chart to ${{ github.run_id }}"
            git push origin main || echo "Push failed. You might need to resolve conflicts manually."
          fi 
